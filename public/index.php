<?php

echo "<br>Hello World<br>";

// echo — Выводит одну или более строк Символ конца строки не добавляется.


// echo имеет также краткую форму, представляющую собой знак равенства, следующий непосредственно за открывающим тэгом. 
$foo = 12;
?>

I have <?=$foo?> foo.

<?php
// print — Выводит строку

// Единственное отличие от echo в том, что print принимает только один аргумент.

print("<br>Hello World");

// Возвращает 1, всегда.

$bar = print "<br>Hello World";

echo '<br>print Возвращает 1, всегда = '.$bar;

// boolean выражает истинность значения. Он может быть либо TRUE, либо FALSE.
// Для указания boolean, используйте константы TRUE или FALSE. Обе они регистронезависимы.

echo '<h4>boolean выражает истинность значения. Он может быть либо TRUE, либо FALSE:</h4>';
$foo = True; // присвоить $foo значение TRUE 
// Обычно, некоторый оператор возвращает boolean значение, которое потом передается управляющей конструкции.

// == это оператор, который проверяет эквивалентность и возвращает boolean

$action = "show_version";

if ($action == "show_version") {
    echo "<br>The version is 1.23";
}

$a = 2;
$b = 3;

if ($a > $b)
   echo "<br>a больше b";

if ($a > $b) {
  echo "<br>a больше, чем b";
} else {
  echo "<br>a НЕ больше, чем b";
}

if ($a > $b) {
    echo "<br>a больше, чем b";
} else if ($a == $b) {
    echo "<br>a равен b";
} else {
    echo "<br>a меньше, чем b";
}

if($a > $b):
    echo '<br>'.$a." больше, чем ".$b;
elseif($a == $b): // Заметьте, тут одно слово.
    echo '<br>'.$a." равно ".$b;
else:
    echo '<br>'.$a." не больше и не равно ".$b;
endif;

// Для явного преобразования в boolean, используйте (bool) или (boolean). При преобразовании в boolean, следующие значения рассматриваются как FALSE:

echo '<h4>При преобразовании в boolean, следующие значения рассматриваются как FALSE:</h4>';
if(! (bool) FALSE) {
    echo '<br>само значение boolean FALSE';
}
if(! (boolean) 0) {
echo '<br>integer 0 (ноль)';       
}
if(! (bool) 0.0) {    
echo '<br>float 0.0 (ноль)';       
}
if(! (bool) "") {
echo '<br>пустая строка, и строка "0"';       
}
if(! (bool) "0") {
echo '<br>пустая строка, и строка "0"';       
}
if(! (bool) []) {
echo '<br>массив без элементов: [] ';       
}
if(! (bool) NULL) {   
echo '<br>особый тип NULL (включая неустановленные переменные) ';       
}
   

// Integer - это число из множества ℤ = {..., -2, -1, 0, 1, 2, ...}.
echo '<h4>Integer - это число из множества ℤ = {..., -2, -1, 0, 1, 2, ...}:</h4>';

$a = 1234; // десятичное число
echo '<br>десятичное число '.$a;       
$a = -123; // отрицательное число
echo '<br>отрицательное число '.$a;       
$a = 0123; // восьмеричное число (эквивалентно 83 в десятичной системе)
echo '<br>восьмеричное число (эквивалентно 83 в десятичной системе) '.$a;       
$a = 0x1A; // шестнадцатеричное число (эквивалентно 26 в десятичной системе)
echo '<br>шестнадцатеричное число (эквивалентно 26 в десятичной системе) '.$a;       
$a = 0b11111111; // двоичное число (эквивалентно 255 в десятичной системе)
echo '<br>двоичное число (эквивалентно 255 в десятичной системе) '.$a;       

//Переполнение целых на 32-битных системах
echo '<h4>Переполнение целых на 32-битных системах:</h4>';

$large_number = 2147483647;
var_dump($large_number);                     // int(2147483647)
echo '<br>';
$large_number = 2147483648;
var_dump($large_number);                     // float(2147483648)
echo '<br>';
$million = 1000000;

$large_number =  50000 * $million;
var_dump($large_number);                     // float(50000000000)
echo '<br>';

// Для большего контроля над округлением используйте функцию round().
echo '<h4>Для большего контроля над округлением используйте функцию round():</h4>';
var_dump(25/7);         // float(3.5714285714286)

var_dump((int) (25/7)); // int(3)
echo '<br>';
var_dump(round(25/7));  // float(4)
echo '<br>';

//Для явного преобразования в integer, используйте приведение (int) или (integer). Значение также может быть преобразовано в integer с помощью функции intval().
echo 'Для явного преобразования в integer, используйте приведение (int) или (integer):</h4>'.(int) 4.4;
echo 'Значение также может быть преобразовано в integer с помощью функции intval():</h4>'.intval(3.14);
// Из булевого типа FALSE преобразуется в 0 (ноль), а TRUE - в 1 (единицу).
// При преобразовании из float в integer, число будет округлено в сторону нуля.

// Числа с плавающей точкой ( "float", "double", или "real"):
echo '<h4>Числа с плавающей точкой ( "float", "double", или "real"):</h4>';
$a = 1.234;
echo '<br>Числа с плавающей точкой '.$a;       
$b = 1.2e3;
echo '<br>Числа с плавающей точкой '.$b;       
$c = 7E-10;
echo '<br>Числа с плавающей точкой '.$c;       
echo '<br>';
//Размер числа с плавающей точкой зависит от платформы, хотя максимум, как правило составляет ~1.8e308 с точностью около 14 десятичных цифр (64-битный IEEE формат).


echo '<h3>Строки</h3>';

echo 'это простая строка';

//Если строка заключена в двойные кавычки ("), PHP распознает следующие управляющие последовательности специальных символов:

//1. Иногда нужно, что бы исходный html код был правильно отформатирован, для того, чтобы верстальщик мог в нем разобраться.
//2. нужно записать какие то данные построчно в текстовый файл.
//3. Символ переноса строки используется в http запросах для разделения заголовков. Соответственно если ваш скрипт работает напрямую с http то без \n не обойтись.
//4. php может использоваться и в консольном режиме как обычное desktop приложение. 

echo '<br>Если строка заключена в двойные кавычки ("), PHP распознает следующие управляющие последовательности специальных символов:<br>';

echo "новая строка \n(LF или 0x0A (10) в ASCII)";

echo "\nвозврат каретки \r(CR или 0x0D (13) в ASCII)";

echo "\nгоризонтальная табуляция \t(HT или 0x09 (9) в ASCII)";


echo '<br>Если интерпретатор встречает знак доллара ($), он захватывает так много символов, сколько возможно, чтобы сформировать правильное имя переменной. Если вы хотите точно определить конец имени, заключайте имя переменной в фигурные скобки:';

$juice = "apple";
echo "<br>He drank some $juice juice.".PHP_EOL; 
echo "<br>He drank some juice made of $juices."; // Не корректно. 's' - верный символ для имени переменной, но переменная имеет имя $juice.
echo "<br>He drank some juice made of ${juice}s."; // Корректно. Строго указан конец имени переменной с помощью скобок 

// Любая скалярная переменная, элемент массива или свойство объекта, отображаемое в строку, может быть представлена в строке этим синтаксисом. Просто запишите выражение так же, как и вне строки, а затем заключите его в { и } . Поскольку { не может быть экранирован, этот синтаксис будет распознаваться только когда $ следует непосредственно за {. Используйте {\$, чтобы напечатать {$. <?php

$great = 'здорово';
echo '<br>';
echo "Это { $great}";// Не работает, выводит: Это { здорово}
echo '<br>';
echo "Это {$great}"; // Работает, выводит: Это здорово

echo '<h3>Строки могут быть объединены при помощи оператора . (точка)</h3>';

echo '<h3>Строки могут быть объединены при помощи оператора (точка)'. 'Обратите внимание, оператор сложения + здесь не работает</h3>';

echo '<h3>Значение может быть преобразовано в строку, с помощью приведения (string), либо функции strval()</h3>';

echo '<h3>Значение boolean TRUE преобразуется в строку "1" '.TRUE.' </h3>';

echo '<h3>Значение boolean FALSE преобразуется в "" (пустую строку) '.FALSE.' </h3>';

//Целое (integer) или число с плавающей точкой (float) преобразуется в строку, представленную числом, состоящим из его цифр (включая показатель степени для чисел с плавающей точкой). Числа с плавающей точкой могут быть преобразованы с помощью экспоненциального представления (4.1E+6).
echo '<p>Целое (integer) или число с плавающей точкой (float) преобразуется в строку, представленную числом, состоящим из его цифр (включая показатель степени для чисел с плавающей точкой). '.strval(3.14).' </p>';


define("CONSTANT", "Здравствуй, мир.");
echo '<br>';
echo CONSTANT; // выводит "Здравствуй, мир."
echo '<br>';
echo Constant; // выводит "Constant" и предупреждение.
echo '<br>';
// Работает, начиная с версии PHP 5.3.0
//const CONSTANT = 'Здравствуй, мир.';
echo CONSTANT;
echo '<br>Текущий номер строки в файле.';
echo '<br>'.__LINE__;

echo '<br>Полный путь и имя текущего файла с развернутыми симлинками. Если используется внутри подключаемого файла, то возвращается имя данного файла.';
echo '<br>'.__FILE__;

echo '<br>Директория файла. Если используется внутри подключаемого файла, то возвращается директория этого файла. Это эквивалентно вызову dirname(__FILE__).';

echo '<br>'.__DIR__;

echo '<br>';
 echo "Имя сервера - ".$_SERVER['SERVER_NAME']."<br />"; 
 echo "IP-адрес сервера - ".$_SERVER['SERVER_ADDR']."<br />"; 
 echo "Порт сервера - ".$_SERVER['SERVER_PORT']."<br />"; 
 echo "Web-сервер - ".$_SERVER['SERVER_SOFTWARE']."<br />"; 
 echo "Версия HTTP-протокола - ".$_SERVER['SERVER_PROTOCOL']."<br />"; 

//элемент $_SERVER['REQUEST_URI'] содержит имя скрипта, начиная от корневой директории виртуального хоста и параметры

echo '<br>элемент $_SERVER["REQUEST_URI"] содержит имя скрипта, начиная от корневой директории виртуального хоста и параметры<br>';
  echo "http://".$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI']; 

echo '<br>';

//Тернарный оператор (‘(expr1) ? (expr2) : (expr3)’) используется для удобства объединения кода в одну строку, но часто избыточен. Хоть он может быть вложенным, рекомендуется его использовать один на строку.
echo '<br>Тернарный оператор (‘(expr1) ? (expr2) : (expr3)’) используется для удобства объединения кода в одну строку, но часто избыточен. Хоть он может быть вложенным, рекомендуется его использовать один на строку.';
  
$a = 5;
    echo ($a == 5) ? 'yay' : 'nay';

echo '<br>';

//Вложения
$b = 10;
    echo ($a) ? ($a == 5) ? 'yay' : 'nay' : ($b == 10) ? 'excessive' : ':(';    // Вложения трудно читаемы.
echo '<br>';

//Используя ‘return’ будьте внимательны:.

  
//$a = 5;
//  echo ($a == 5) ? return true : return false;    // этот пример будет выдавать сообщение об ошибке
  
$a = 5;

//return ($a == 5) ? 'yay' : 'nope';    // этот пример вернёт 'yay'

echo '<br>';

$i = 1;

if ($i == 0) {
    echo "i равно 0";
} elseif ($i == 1) {
    echo "i равно 1";
} elseif ($i == 2) {
    echo "i равно 2";
}

echo '<br>';
switch ($i) {
    case 0:
        echo "i равно 0";
        break;
    case 1:
        echo "i равно 1";
        break;
}

